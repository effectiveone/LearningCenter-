datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Language {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String?
  flashcards Flashcard[]
}

model Category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String?
  flashcards Flashcard[]
}

model Level {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  name       String?
  flashcards Flashcard[]
}

model UserSet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Flashcard {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  question       String?
  answer         String?
  language       Language?      @relation(fields: [languageId], references: [id])
  languageId     String?        @db.ObjectId
  category       Category?      @relation(fields: [categoryId], references: [id])
  categoryId     String?        @db.ObjectId
  level          Level?         @relation(fields: [levelId], references: [id])
  levelId        String?        @db.ObjectId
  userProgresses UserProgress[]
}

model UserProgress {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  correctAnswers   Int?
  incorrectAnswers Int?
  user             User?      @relation(fields: [userId], references: [id])
  userId           String?    @db.ObjectId
  flashcard        Flashcard? @relation(fields: [flashcardId], references: [id])
  flashcardId      String?    @db.ObjectId
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  firstName      String?
  lastName       String?
  username       String         @unique
  email          String?        @unique
  password       String
  roles          Json
  userProgresses UserProgress[]
  userSets       UserSet[]
}
